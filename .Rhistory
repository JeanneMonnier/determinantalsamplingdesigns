a[kr[r]] <- r - 1
}
r <- 0
for (k in 1:N) {
if (is_kr[k]) {
r <- a[k] + 1
}
else {
a[k] <- r
inter <- sqrt( Pi[k] / (a[k] + 1 - sum[k]) )
s[k] <- round(inter, digits = 15)
}
c[k] <- sqrt(1 - s[k]^2)
}
V <- matrix(0, nrow = N , ncol = n)
V[1, 1] = 1
if ((n-1) != 0) {
for (r in 1:(n-1)) {
V[kr[r] + 1, r + 1] = 1
}
}
for (k in 1:(N-1)) {
L <- V[k, ]
M <- V[k + 1,]
V[k, ] <- s[k] * L - c[k] * M
V[k + 1, ] <- c[k] * L + s[k] * M
}
if (!K) {
return(V)
}
else {
return(V %*% t(V))
}
}
loonismary(rep(1000/40000, 40000))
loonismary <- function(Pi, K = F) {
N <- length(Pi)
#SOME ERROR MESSAGES
if (N < 2) {
rlang::abort("The sampling designs should be define on a set of more than one element. (length(Pi) > 1)")
}
for (k in 1:N) {
if (Pi[k] >= 1 | Pi[k] <= 0) {
rlang::abort("Pi is not a vector of probabilities (0 <= p < 1)")
}
}
sum <- c(0, Pi[1])
for (k in 2:N) {
sum[k + 1] <- sum[k] + Pi[k]
}
n <- round(sum[N + 1], 9)
kr <- c()
is_kr <- rep(FALSE, N)
alpha <- c()
k <- 1
for (r in 1:n) {
I <- TRUE
while (I) {
print("*")
print(r)
print(round(r - sum[k + 1], 8))
if (round(r - sum[k + 1], 8) <= 0) {
kr[r] <- k
is_kr[k] <- TRUE
alpha[k] <- r - sum[kr[r]]
I <- FALSE
}
else {
k <- k + 1
}
}
}
s <- c()
c <- c()
a <- c()
for (r in 1:n) {
int <- sqrt( (1 - Pi[kr[r]]) / (1 - alpha[kr[r]]) )
s[kr[r]] <- round(int, 8)
a[kr[r]] <- r - 1
}
r <- 0
for (k in 1:N) {
if (is_kr[k]) {
r <- a[k] + 1
}
else {
a[k] <- r
inter <- sqrt( Pi[k] / (a[k] + 1 - sum[k]) )
s[k] <- round(inter, digits = 15)
}
c[k] <- sqrt(1 - s[k]^2)
}
V <- matrix(0, nrow = N , ncol = n)
V[1, 1] = 1
if ((n-1) != 0) {
for (r in 1:(n-1)) {
V[kr[r] + 1, r + 1] = 1
}
}
for (k in 1:(N-1)) {
L <- V[k, ]
M <- V[k + 1,]
V[k, ] <- s[k] * L - c[k] * M
V[k + 1, ] <- c[k] * L + s[k] * M
}
if (!K) {
return(V)
}
else {
return(V %*% t(V))
}
}
loonismary(rep(1000/40000, 40000))
loonismary <- function(Pi, K = F) {
N <- length(Pi)
#SOME ERROR MESSAGES
if (N < 2) {
rlang::abort("The sampling designs should be define on a set of more than one element. (length(Pi) > 1)")
}
for (k in 1:N) {
if (Pi[k] >= 1 | Pi[k] <= 0) {
rlang::abort("Pi is not a vector of probabilities (0 <= p < 1)")
}
}
sum <- c(0, Pi[1])
for (k in 2:N) {
sum[k + 1] <- sum[k] + Pi[k]
}
n <- round(sum[N + 1], 8)
kr <- c()
is_kr <- rep(FALSE, N)
alpha <- c()
k <- 1
for (r in 1:n) {
I <- TRUE
while (I) {
#print("*")
#print(r)
#print(round(r - sum[k + 1], 8))
if (round(r - sum[k + 1], 8) <= 0) {
kr[r] <- k
is_kr[k] <- TRUE
alpha[k] <- r - sum[kr[r]]
I <- FALSE
}
else {
k <- k + 1
}
}
}
s <- c()
c <- c()
a <- c()
for (r in 1:n) {
int <- sqrt( (1 - Pi[kr[r]]) / (1 - alpha[kr[r]]) )
s[kr[r]] <- round(int, 8)
a[kr[r]] <- r - 1
}
r <- 0
for (k in 1:N) {
if (is_kr[k]) {
r <- a[k] + 1
}
else {
a[k] <- r
inter <- sqrt( Pi[k] / (a[k] + 1 - sum[k]) )
s[k] <- round(inter, digits = 15)
}
c[k] <- sqrt(1 - s[k]^2)
}
V <- matrix(0, nrow = N , ncol = n)
V[1, 1] = 1
if ((n-1) != 0) {
for (r in 1:(n-1)) {
V[kr[r] + 1, r + 1] = 1
}
}
for (k in 1:(N-1)) {
L <- V[k, ]
M <- V[k + 1,]
V[k, ] <- s[k] * L - c[k] * M
V[k + 1, ] <- c[k] * L + s[k] * M
}
if (!K) {
return(V)
}
else {
return(V %*% t(V))
}
}
loonismary(rep(1000/40000, 40000))
mb <- microbenchmark(loonismary(rep(1/40000, 40000)), loonismary(rep(10/40000, 40000)), loonismary(rep(100/40000, 40000)),loonismary(rep(1000/40000, 40000)), times = 1)
mb
mb <- microbenchmark(loonismary(rep(1/40000, 40000)), loonismary(rep(10/40000, 40000)), loonismary(rep(100/40000, 40000)),loonismary(rep(1000/40000, 40000)),loonismary(rep(10000/40000, 40000)), times = 1)
mb
mb <- microbenchmark(loonismary(rep(1/40000, 40000)), loonismary(rep(10/40000, 40000)), loonismary(rep(100/40000, 40000)),loonismary(rep(1000/40000, 40000)),loonismary(rep(10000/40000, 40000)), times = 1)
mb
mb <- microbenchmark(loonismary(rep(30000/40000, 40000)), times = 1)
mb <- microbenchmark(loonismary(rep(20000/40000, 40000)), times = 1)
mb
76999.3540/1000
loonismary(rep(29000/40000, 40000))
?(matrix)
?(sparse)
?sparse
library('Matrix')
#' loonismary
#'
#' @description \code{loonismary} constructs a real projection matrix, kernels of fixed size sampling designs with first order inclusion probabilities given by \code{Pi}.
#'
#' @param Pi a vector of first order inclusion probabilities weights.
#' @param K a logical indicating which model of matrix should be returned. See 'Details.'
#'
#' @details It is common in practice to work with fixed size sampling designs with prescribed first order inclusion probabilities. Constructing such a determinantal sampling design is equivalent to constructing a projection matrix with a prescribed diagonal. \code{loonismary} constructs this matrix.
#'
#' @details As \code{Pi} is a vector of first order inclusion probabilities, it should be of length N, the number of elements \code{N} the set and should contain only values between 0 and 1 excluded such taht the sum of these values is \code{n}, the number of elements to be sampled.
#'
#' @return For \code{K = TRUE}, the kernel matrix of the determinantal sampling design such that the first order inclusion probabilities are the ones given in \code{Pi}.
#' @return For \code{K = FALSE}, the matrix \code{V} such that \code{VV*} is the kernel matrix of the determinantal sampling design such that the first order inclusion probabilities are the ones given in \code{Pi}.
#'
#' @importFrom rlang abort
#'
#' @export
#'
#' @references V., Loonis, X., Mary, (2017) "Determinantal Sampling Designs".
#'
#' @examples
#' loonismary(c(0.5, 0.75, 0.75, 0.2, 0.4, 0.6, 0.8))
#' loonismary(rep(36/200, 200))
#'
#' @seealso \link{lavancier}
#'
loonismary <- function(Pi, K = F) {
N <- length(Pi)
#SOME ERROR MESSAGES
if (N < 2) {
rlang::abort("The sampling designs should be define on a set of more than one element. (length(Pi) > 1)")
}
for (k in 1:N) {
if (Pi[k] >= 1 | Pi[k] <= 0) {
rlang::abort("Pi is not a vector of probabilities (0 <= p < 1)")
}
}
sum <- c(0, Pi[1])
for (k in 2:N) {
sum[k + 1] <- sum[k] + Pi[k]
}
n <- round(sum[N + 1], 8)
kr <- c()
is_kr <- rep(FALSE, N)
alpha <- c()
k <- 1
for (r in 1:n) {
I <- TRUE
while (I) {
#print("*")
#print(r)
#print(round(r - sum[k + 1], 8))
if (round(r - sum[k + 1], 8) <= 0) {
kr[r] <- k
is_kr[k] <- TRUE
alpha[k] <- r - sum[kr[r]]
I <- FALSE
}
else {
k <- k + 1
}
}
}
s <- c()
c <- c()
a <- c()
for (r in 1:n) {
int <- sqrt( (1 - Pi[kr[r]]) / (1 - alpha[kr[r]]) )
s[kr[r]] <- round(int, 8)
a[kr[r]] <- r - 1
}
r <- 0
for (k in 1:N) {
if (is_kr[k]) {
r <- a[k] + 1
}
else {
a[k] <- r
inter <- sqrt( Pi[k] / (a[k] + 1 - sum[k]) )
s[k] <- round(inter, digits = 15)
}
c[k] <- sqrt(1 - s[k]^2)
}
if (n*N < 800000000){
V <- matrix(0, nrow = N , ncol = n)
}
else {
V <- Matrix(0, nrow = N , ncol = n, sparse = TRUE)
}
V[1, 1] = 1
if ((n-1) != 0) {
for (r in 1:(n-1)) {
V[kr[r] + 1, r + 1] = 1
}
}
for (k in 1:(N-1)) {
L <- V[k, ]
M <- V[k + 1,]
V[k, ] <- s[k] * L - c[k] * M
V[k + 1, ] <- c[k] * L + s[k] * M
}
if (!K) {
return(V)
}
else {
return(V %*% t(V))
}
}
loonismary(rep(30000/40000, 40000))
29500*40000
1200000000
#' loonismary
#'
#' @description \code{loonismary} constructs a real projection matrix, kernels of fixed size sampling designs with first order inclusion probabilities given by \code{Pi}.
#'
#' @param Pi a vector of first order inclusion probabilities weights.
#' @param K a logical indicating which model of matrix should be returned. See 'Details.'
#'
#' @details It is common in practice to work with fixed size sampling designs with prescribed first order inclusion probabilities. Constructing such a determinantal sampling design is equivalent to constructing a projection matrix with a prescribed diagonal. \code{loonismary} constructs this matrix.
#'
#' @details As \code{Pi} is a vector of first order inclusion probabilities, it should be of length N, the number of elements \code{N} the set and should contain only values between 0 and 1 excluded such taht the sum of these values is \code{n}, the number of elements to be sampled.
#'
#' @return For \code{K = TRUE}, the kernel matrix of the determinantal sampling design such that the first order inclusion probabilities are the ones given in \code{Pi}.
#' @return For \code{K = FALSE}, the matrix \code{V} such that \code{VV*} is the kernel matrix of the determinantal sampling design such that the first order inclusion probabilities are the ones given in \code{Pi}.
#'
#' @importFrom rlang abort
#'
#' @export
#'
#' @references V., Loonis, X., Mary, (2017) "Determinantal Sampling Designs".
#'
#' @examples
#' loonismary(c(0.5, 0.75, 0.75, 0.2, 0.4, 0.6, 0.8))
#' loonismary(rep(36/200, 200))
#'
#' @seealso \link{lavancier}
#'
loonismary_test <- function(Pi, K = F) {
N <- length(Pi)
#SOME ERROR MESSAGES
if (N < 2) {
rlang::abort("The sampling designs should be define on a set of more than one element. (length(Pi) > 1)")
}
for (k in 1:N) {
if (Pi[k] >= 1 | Pi[k] <= 0) {
rlang::abort("Pi is not a vector of probabilities (0 <= p < 1)")
}
}
sum <- c(0, Pi[1])
for (k in 2:N) {
sum[k + 1] <- sum[k] + Pi[k]
}
n <- round(sum[N + 1], 8)
kr <- c()
is_kr <- rep(FALSE, N)
alpha <- c()
k <- 1
for (r in 1:n) {
I <- TRUE
while (I) {
print("*")
print(r)
print(round(r - sum[k + 1], 8))
if (round(r - sum[k + 1], 8) <= 0) {
kr[r] <- k
is_kr[k] <- TRUE
alpha[k] <- r - sum[kr[r]]
I <- FALSE
}
else {
k <- k + 1
}
}
}
s <- c()
c <- c()
a <- c()
for (r in 1:n) {
int <- sqrt( (1 - Pi[kr[r]]) / (1 - alpha[kr[r]]) )
s[kr[r]] <- round(int, 8)
a[kr[r]] <- r - 1
}
r <- 0
for (k in 1:N) {
if (is_kr[k]) {
r <- a[k] + 1
}
else {
a[k] <- r
inter <- sqrt( Pi[k] / (a[k] + 1 - sum[k]) )
s[k] <- round(inter, digits = 15)
}
c[k] <- sqrt(1 - s[k]^2)
}
if (n*N < 1180000000){
V <- matrix(0, nrow = N , ncol = n)
}
else {
V <- Matrix(0, nrow = N , ncol = n, sparse = TRUE)
}
V[1, 1] = 1
if ((n-1) != 0) {
for (r in 1:(n-1)) {
V[kr[r] + 1, r + 1] = 1
}
}
for (k in 1:(N-1)) {
L <- V[k, ]
M <- V[k + 1,]
V[k, ] <- s[k] * L - c[k] * M
V[k + 1, ] <- c[k] * L + s[k] * M
}
if (!K) {
return(V)
}
else {
return(V %*% t(V))
}
}
loonismary(rep(29000/40000, 40000))
loonismary_test(rep(29000/40000, 40000))
loonismary_test <- function(Pi, K = F) {
N <- length(Pi)
#SOME ERROR MESSAGES
if (N < 2) {
rlang::abort("The sampling designs should be define on a set of more than one element. (length(Pi) > 1)")
}
for (k in 1:N) {
if (Pi[k] >= 1 | Pi[k] <= 0) {
rlang::abort("Pi is not a vector of probabilities (0 <= p < 1)")
}
}
sum <- c(0, Pi[1])
for (k in 2:N) {
sum[k + 1] <- sum[k] + Pi[k]
}
n <- round(sum[N + 1], 7)
kr <- c()
is_kr <- rep(FALSE, N)
alpha <- c()
k <- 1
for (r in 1:n) {
I <- TRUE
while (I) {
print("*")
print(r)
print(round(r - sum[k + 1], 7))
if (round(r - sum[k + 1], 7) <= 0) {
kr[r] <- k
is_kr[k] <- TRUE
alpha[k] <- r - sum[kr[r]]
I <- FALSE
}
else {
k <- k + 1
}
}
}
s <- c()
c <- c()
a <- c()
for (r in 1:n) {
int <- sqrt( (1 - Pi[kr[r]]) / (1 - alpha[kr[r]]) )
s[kr[r]] <- round(int, 8)
a[kr[r]] <- r - 1
}
r <- 0
for (k in 1:N) {
if (is_kr[k]) {
r <- a[k] + 1
}
else {
a[k] <- r
inter <- sqrt( Pi[k] / (a[k] + 1 - sum[k]) )
s[k] <- round(inter, digits = 15)
}
c[k] <- sqrt(1 - s[k]^2)
}
if (n*N < 1180000000){
V <- matrix(0, nrow = N , ncol = n)
}
else {
V <- Matrix(0, nrow = N , ncol = n, sparse = TRUE)
}
V[1, 1] = 1
if ((n-1) != 0) {
for (r in 1:(n-1)) {
V[kr[r] + 1, r + 1] = 1
}
}
for (k in 1:(N-1)) {
L <- V[k, ]
M <- V[k + 1,]
V[k, ] <- s[k] * L - c[k] * M
V[k + 1, ] <- c[k] * L + s[k] * M
}
if (!K) {
return(V)
}
else {
return(V %*% t(V))
}
}
loonismary_test(rep(29000/40000, 40000))
warnings()
file.edit("~/.Renviron")
